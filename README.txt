 ====== Cars, Motorcycles and Trucks Rental Agency ======

This Java program is designed to manage vehicle information for a car rental agency. The program allows company staff to add new vehicles, input their details, and display the information of all available vehicles. The implementation consists of several key components: interfaces, classes, and the main program logic.

First, the program defines four interfaces: `Vehicle`, `CarVehicle`, `MotorVehicle`, and `TruckVehicle`. These interfaces establish a contract for what methods must be implemented by any class that claims to be a type of vehicle. The `Vehicle` interface includes methods to retrieve the vehicle's make, model, and year of manufacture. The `CarVehicle` interface adds methods specific to cars, such as the number of doors and fuel type. Similarly, the `MotorVehicle` interface includes methods for the number of wheels and the type of motorcycle, and the `TruckVehicle` interface includes methods for cargo capacity and transmission type.

The next step is to implement these interfaces in concrete classes representing different types of vehicles. The `Car`, `Motorcycle`, and `Truck` classes implement both the `Vehicle` interface and their respective specialized interfaces (`CarVehicle`, `MotorVehicle`, and `TruckVehicle`). This ensures that each vehicle type adheres to the defined contracts and provides specific behaviors and attributes relevant to that type.

The `Car` class includes fields for the make, model, year, number of doors, and fuel type, along with corresponding getter and setter methods. The `Motorcycle` class has fields for the make, model, year, number of wheels, and type of motorcycle, with similar getter and setter methods. The `Truck` class includes fields for the make, model, year, cargo capacity, and transmission type, again with appropriate getters and setters. By implementing the interfaces, these classes guarantee that they provide the necessary methods to interact with vehicle information consistently.

The main program logic resides in the `Main` class, which contains a list to store all vehicle objects and methods to add new vehicles and display all vehicles. The main method is the entry point of the program and presents a menu to the user, allowing them to choose between adding a new car, motorcycle, or truck, displaying all vehicles, or exiting the program. This user interface is implemented using a loop that continually presents the menu until the user chooses to exit.

The `initializeVehicles` method populates the list with some predefined vehicle objects. This method adds instances of the `Car`, `Motorcycle`, and `Truck` classes with specific details, representing the initial inventory of the rental agency. This step ensures that the program starts with some existing data, providing a more realistic scenario for demonstration purposes.

When a user chooses to add a new vehicle, the program prompts them to enter the details specific to that vehicle type. For a car, this includes the make, model, year, number of doors, and fuel type. For a motorcycle, the user must provide the make, model, year, number of wheels, and type of motorcycle. For a truck, the required details are the make, model, year, cargo capacity, and transmission type. The program creates a new instance of the corresponding class with the provided details and adds it to the list of vehicles.

The `displayAllVehicles` method iterates over the list of vehicles and prints the details of each one. It first checks if the list is empty and informs the user if there are no vehicles available. Otherwise, it prints the make, model, and year for each vehicle. If the vehicle is a car, it also prints the number of doors and fuel type. If it is a motorcycle, it prints the number of wheels and type of motorcycle. If it is a truck, it prints the cargo capacity and transmission type. This method ensures that all relevant information about each vehicle is displayed clearly and consistently.

Overall, this program provides a comprehensive system for managing vehicle information in a car rental agency. It uses interfaces to enforce consistent behavior across different vehicle types and concrete classes to implement these behaviors. The main program logic allows company staff to interactively add new vehicles and display the details of all vehicles, making it a useful tool for managing the agency's inventory. The design emphasizes readability, maintainability, and adherence to best practices, ensuring a clean and well-structured codebase that can be easily extended or modified in the future.
